
#version 400
layout(quads, fractional_even_spacing, ccw) in;

struct Cam
{
	vec4 ori;
	vec3 pos;
};

uniform int size;
uniform int terrainSize;
uniform vec3 center;
uniform mat4 projection;
uniform Cam cam;

uniform sampler2D heightmap;


out float fragTerrainSize;
out vec3 fragWorldPos;
out vec3 fragObjectPos;

//out vec3 fragNorm;


vec4 quatRotate(vec4 action, vec4 victim)
{
	float ar = action.x;	float br = victim.x;
	vec3 av = action.yzw;	vec3 bv = victim.yzw;
	return vec4(ar*br - dot(av,bv), ar*bv + br*av + cross(av,bv));
}

float heightFromTex(float x, float z)
{
		vec2 texPos = vec2( (x + terrainSize/2)/terrainSize, (z + terrainSize/2)/terrainSize );
		vec4 heightColor = texture(heightmap,texPos);
		float ans = ((heightColor.r + heightColor.g + heightColor.b)/3.0)*2 - 1;
		ans = ans * terrainSize/4;
		return ans;
		
}

void main()
{
		float u = gl_TessCoord.x;
		float v = gl_TessCoord.y;

		vec4 p0 = gl_in[0].gl_Position;
		vec4 p1 = gl_in[1].gl_Position;
		vec4 p2 = gl_in[2].gl_Position;
		vec4 p3 = gl_in[3].gl_Position;
		// Linear interpolation
		vec4 interpolatedPos =
		p0 * (1-u) * (1-v) +
		p1 * u * (1-v) +
		p3 * v * (1-u) +
		p2 * u * v;



		vec3 objectPos = interpolatedPos.xyz;
		fragObjectPos = objectPos;
		
		vec3 worldPos = vec3(size/2*objectPos.x,size/2*objectPos.y,size/2*objectPos.z);
		worldPos = center + worldPos;

		//worldPos.y = heightFromTex(worldPos.x, worldPos.z);

		fragTerrainSize = terrainSize;
		fragWorldPos = worldPos;

		vec3 viewPos = worldPos - cam.pos;
		vec4 quatView = vec4(0,viewPos);
		vec4 oriQuat = vec4(cam.ori.x, -cam.ori.yzw);
		vec4 oriQuatInv = vec4(cam.ori);

		quatView = quatRotate(quatView, oriQuatInv);
		quatView = quatRotate(oriQuat, quatView);


		vec4 projectedPos = projection * vec4(quatView.yzw,1.0);

		gl_Position = projectedPos;
}